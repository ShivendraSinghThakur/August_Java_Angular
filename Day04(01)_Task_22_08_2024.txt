Create a Class as

Customer contains

custId int
custName String
city String
premium double
dateOfBirth date (utildate)

Add 10 records and print using foreach method
display records whose premium > 80000
display who belongs to city delhi
display sorted by dateofbirth
display sorted by custName

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

package com.java.task;

import java.util.Date;

public class Customer {
	private int custId;
	private String custName;
	private String city;
	private double premium;
	Date dateOfBirth;
	
	public Customer() {
		
	}

	public Customer(int custId, String custName, String city, double premium, Date dateOfBirth) {
		this.custId = custId;
		this.custName = custName;
		this.city = city;
		this.premium = premium;
		this.dateOfBirth = dateOfBirth;
	}
	

	public int getCustId() {
		return custId;
	}

	public void setCustId(int custId) {
		this.custId = custId;
	}

	public String getCustName() {
		return custName;
	}

	public void setCustName(String custName) {
		this.custName = custName;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public double getPremium() {
		return premium;
	}

	public void setPremium(double premium) {
		this.premium = premium;
	}

	public Date getDateOfBirth() {
		return dateOfBirth;
	}

	public void setDateOfBirth(Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

	@Override
	public String toString() {
		return "Customer [custId=" + custId + ", custName=" + custName + ", city=" + city + ", premium=" + premium
				+ ", dateOfBirth=" + dateOfBirth + "]";
	}
	
	
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

package com.java.task;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Stream;

public class MainProgram {
	
	public static void main(String[] args) throws Exception {
		List<Customer> customers = new ArrayList<>();
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		
		customers.add(new Customer(1, "Shivendra", "Burhanpur", 99999, sdf.parse("26-03-2002")));
		customers.add(new Customer(2, "Shivansh", "Burhanpur", 79234, sdf.parse("23-07-2002")));
		customers.add(new Customer(3, "Siddharth", "Burhanpur", 99484, sdf.parse("19-10-2002")));
		customers.add(new Customer(4, "Aditya", "Burhanpur", 99599, sdf.parse("21-01-2002")));
		customers.add(new Customer(5, "Shireen", "Jabalpur", 79999, sdf.parse("11-12-2002")));
		customers.add(new Customer(6, "Jayant", "Delhi", 74899, sdf.parse("25-07-2002")));
		customers.add(new Customer(7, "Nikhil", "Delhi", 91299, sdf.parse("02-04-2002")));
		customers.add(new Customer(8, "Praveen", "Guna", 99689, sdf.parse("05-01-2002")));
		customers.add(new Customer(9, "Sharansh", "Lalitpur", 73699, sdf.parse("15-06-2002")));
		customers.add(new Customer(10, "Om", "Ashoknagar", 99569, sdf.parse("29-04-2002")));
		
		//// Display all records
		System.out.println("Customer List is ");
		customers.forEach(x -> {
			System.out.println(x);
		});
		
		// Display records where premium > 80000
		Stream<Customer> filter1 = customers.stream().filter(x -> x.getPremium() >= 80000);
		
		System.out.println("\nFiltered Data is ");
		filter1.forEach(x -> {
			System.out.println(x);
		});
		
        // Display records of customers who belong to city Delhi
		Stream<Customer> filter2 = customers.stream().filter(x -> x.getCity() == "Delhi");
		
		System.out.println("\nCustomers from Delhi:");
		filter2.forEach(x -> {
			System.out.println(x);
		});
		
		// Display sorted by dateOfBirth
		System.out.println("\nSort By Date of Birth  ");
		Collections.sort(customers, (c1, c2) -> {
			return c1.getDateOfBirth().compareTo(c2.getDateOfBirth());
		});
		
		customers.forEach(x -> {
			System.out.println(x);
		});
		
		// Display sorted by custName
		System.out.println("\nCustomers sorted by custName:");
		Collections.sort(customers, (c1, c2) -> {
			return c1.getCustName().compareTo(c2.getCustName());
		});
		
		customers.forEach(x -> {
			System.out.println(x);
		});
		
		
		//customers.stream().sorted(Comparator.comparing(c -> c.custName).forEach(System.out::println));
		
	}
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------